2024-10-22 20:34:31,616 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 1.13.1+cu117
	TorchVision: 0.14.1+cu117
2024-10-22 20:34:31,617 INFO: 
  name: finetune_RealESRGANx4plus_400k
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 2
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 120
  datasets:[
    train:[
      name: custom_data
      type: RealESRGANDataset
      dataroot_gt: HR
      meta_info: HR/meta_info.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 13
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.2
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 13
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.2
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.75
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 4
      batch_size_per_gpu: 4
      dataset_enlarge_ratio: 1
      prefetch_mode: cuda
      pin_memory: True
      phase: train
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_320000.pth
    param_key_g: params
    strict_load_g: True
    pretrain_network_d: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_d_320000.pth
    param_key_d: params
    strict_load_d: True
    resume_state: experiments/finetune_RealESRGANx4plus_400k/training_states/320000.state
    experiments_root: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k
    models: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models
    training_states: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/training_states
    log: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k
    visualization: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [400000]
      gamma: 0.5
    ]
    total_iter: 400000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: True
  rank: 0
  world_size: 2
  auto_resume: True
  is_train: True
  root_path: /home/be205_18/Real-ESRGAN-master

2024-10-22 20:34:31,866 INFO: Dataset [RealESRGANDataset] - custom_data is built.
2024-10-22 20:34:31,866 INFO: Training statistics:
	Number of train images: 499
	Dataset enlarge ratio: 1
	Batch size per gpu: 4
	World size (gpu number): 2
	Require iter number per epoch: 63
	Total epochs: 6350; iters: 400000.
2024-10-22 20:34:32,120 INFO: Network [RRDBNet] is created.
2024-10-22 20:34:32,366 INFO: Network: DistributedDataParallel - RRDBNet, with parameters: 16,697,987
2024-10-22 20:34:32,367 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2024-10-22 20:34:32,624 INFO: Loading RRDBNet model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_320000.pth, with param key: [params].
2024-10-22 20:34:32,711 INFO: Use Exponential Moving Average with decay: 0.999
2024-10-22 20:34:32,935 INFO: Network [RRDBNet] is created.
2024-10-22 20:34:33,092 INFO: Loading RRDBNet model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_320000.pth, with param key: [params_ema].
2024-10-22 20:34:33,206 INFO: Network [UNetDiscriminatorSN] is created.
2024-10-22 20:34:33,213 INFO: Network: DistributedDataParallel - UNetDiscriminatorSN, with parameters: 4,376,897
2024-10-22 20:34:33,213 INFO: UNetDiscriminatorSN(
  (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2024-10-22 20:34:33,277 INFO: Loading UNetDiscriminatorSN model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_d_320000.pth, with param key: [params].
2024-10-22 20:34:33,293 INFO: Loss [L1Loss] is created.
2024-10-22 20:34:34,787 INFO: Loss [PerceptualLoss] is created.
2024-10-22 20:34:34,808 INFO: Loss [GANLoss] is created.
2024-10-22 20:34:34,840 INFO: Model [RealESRGANModel] is created.
2024-10-22 20:34:35,085 INFO: Resuming training from epoch: 5158, iter: 320000.
2024-10-22 20:34:41,483 INFO: Use cuda prefetch dataloader
2024-10-22 20:34:41,483 INFO: Start training from epoch: 5158, iter: 320000
2024-10-22 20:35:57,839 INFO: [finet..][epoch:5159, iter: 320,100, lr:(1.000e-04,)] [eta: 18:11:04, time (data): 0.764 (0.159)] l_g_pix: 3.6268e-02 l_g_percep: 6.5543e+00 l_g_gan: 5.8256e-01 l_d_real: 1.8541e-02 out_d_real: 1.1114e+01 l_d_fake: 1.8058e-02 out_d_fake: -5.8069e+00 
2024-10-22 20:37:08,435 INFO: [finet..][epoch:5161, iter: 320,200, lr:(1.000e-04,)] [eta: 16:54:30, time (data): 0.735 (0.151)] l_g_pix: 2.6291e-02 l_g_percep: 5.8645e+00 l_g_gan: 5.4575e-01 l_d_real: 2.4699e-01 out_d_real: 9.1572e+00 l_d_fake: 3.0941e-02 out_d_fake: -5.4261e+00 
2024-10-22 20:38:11,591 INFO: [finet..][epoch:5162, iter: 320,300, lr:(1.000e-04,)] [eta: 15:55:22, time (data): 0.632 (0.079)] l_g_pix: 2.9808e-02 l_g_percep: 5.1684e+00 l_g_gan: 5.0361e-01 l_d_real: 1.8398e-02 out_d_real: 1.0109e+01 l_d_fake: 2.3697e-02 out_d_fake: -5.0113e+00 
2024-10-22 20:39:21,765 INFO: [finet..][epoch:5164, iter: 320,400, lr:(1.000e-04,)] [eta: 15:48:26, time (data): 0.667 (0.109)] l_g_pix: 2.5140e-02 l_g_percep: 5.5823e+00 l_g_gan: 5.7884e-01 l_d_real: 4.3963e-03 out_d_real: 1.3521e+01 l_d_fake: 1.8871e-02 out_d_fake: -5.7693e+00 
2024-10-22 20:40:31,840 INFO: [finet..][epoch:5166, iter: 320,500, lr:(1.000e-04,)] [eta: 15:43:29, time (data): 0.703 (0.148)] l_g_pix: 3.8747e-02 l_g_percep: 6.4508e+00 l_g_gan: 4.6830e-01 l_d_real: 4.2307e-02 out_d_real: 1.1639e+01 l_d_fake: 6.2952e-02 out_d_fake: -4.6198e+00 
2024-10-22 20:41:34,945 INFO: [finet..][epoch:5167, iter: 320,600, lr:(1.000e-04,)] [eta: 15:24:28, time (data): 0.667 (0.111)] l_g_pix: 2.3921e-02 l_g_percep: 5.2169e+00 l_g_gan: 4.3763e-01 l_d_real: 4.8149e-03 out_d_real: 1.1889e+01 l_d_fake: 4.5518e-02 out_d_fake: -4.3291e+00 
2024-10-22 20:42:45,073 INFO: [finet..][epoch:5169, iter: 320,700, lr:(1.000e-04,)] [eta: 15:23:48, time (data): 0.706 (0.148)] l_g_pix: 3.2017e-02 l_g_percep: 5.1505e+00 l_g_gan: 4.6214e-01 l_d_real: 9.8886e-03 out_d_real: 1.0611e+01 l_d_fake: 5.6332e-02 out_d_fake: -4.5649e+00 
2024-10-22 20:43:47,947 INFO: [finet..][epoch:5170, iter: 320,800, lr:(1.000e-04,)] [eta: 15:11:04, time (data): 0.667 (0.112)] l_g_pix: 3.0801e-02 l_g_percep: 6.0990e+00 l_g_gan: 7.0490e-01 l_d_real: 1.2109e-01 out_d_real: 9.0945e+00 l_d_fake: 5.1020e-03 out_d_fake: -7.0437e+00 
2024-10-22 20:44:58,319 INFO: [finet..][epoch:5172, iter: 320,900, lr:(1.000e-04,)] [eta: 15:11:53, time (data): 0.713 (0.151)] l_g_pix: 5.6332e-02 l_g_percep: 7.1214e+00 l_g_gan: 6.0556e-01 l_d_real: 4.8530e-02 out_d_real: 1.1377e+01 l_d_fake: 2.3861e-02 out_d_fake: -6.0313e+00 
2024-10-22 20:46:08,625 INFO: [finet..][epoch:5174, iter: 321,000, lr:(1.000e-04,)] [eta: 15:12:14, time (data): 0.708 (0.146)] l_g_pix: 2.1199e-02 l_g_percep: 4.7530e+00 l_g_gan: 5.0518e-01 l_d_real: 3.4436e-02 out_d_real: 1.2600e+01 l_d_fake: 2.8393e-02 out_d_fake: -5.0231e+00 
2024-10-22 20:47:11,541 INFO: [finet..][epoch:5175, iter: 321,100, lr:(1.000e-04,)] [eta: 15:03:28, time (data): 0.632 (0.079)] l_g_pix: 3.3124e-02 l_g_percep: 6.3365e+00 l_g_gan: 4.8581e-01 l_d_real: 1.5226e-02 out_d_real: 1.3653e+01 l_d_fake: 4.2784e-02 out_d_fake: -4.8151e+00 
2024-10-22 20:48:21,465 INFO: [finet..][epoch:5177, iter: 321,200, lr:(1.000e-04,)] [eta: 15:03:39, time (data): 0.667 (0.113)] l_g_pix: 3.2174e-02 l_g_percep: 5.8116e+00 l_g_gan: 3.7614e-01 l_d_real: 2.3685e-02 out_d_real: 1.2000e+01 l_d_fake: 2.3242e-01 out_d_fake: -3.5286e+00 
2024-10-22 20:49:23,598 INFO: [finet..][epoch:5178, iter: 321,300, lr:(1.000e-04,)] [eta: 14:55:47, time (data): 0.625 (0.080)] l_g_pix: 2.9652e-02 l_g_percep: 5.4096e+00 l_g_gan: 4.4635e-01 l_d_real: 1.8146e-02 out_d_real: 1.2391e+01 l_d_fake: 3.7528e-02 out_d_fake: -4.4256e+00 
2024-10-22 20:50:34,551 INFO: [finet..][epoch:5180, iter: 321,400, lr:(1.000e-04,)] [eta: 14:57:08, time (data): 0.668 (0.112)] l_g_pix: 3.8518e-02 l_g_percep: 3.8518e+00 l_g_gan: 4.6637e-01 l_d_real: 2.1096e-01 out_d_real: 8.3913e+00 l_d_fake: 2.6246e-02 out_d_fake: -4.6373e+00 
2024-10-22 20:51:45,272 INFO: [finet..][epoch:5182, iter: 321,500, lr:(1.000e-04,)] [eta: 14:57:56, time (data): 0.719 (0.151)] l_g_pix: 3.5365e-02 l_g_percep: 5.9284e+00 l_g_gan: 6.0703e-01 l_d_real: 2.5220e-02 out_d_real: 1.3560e+01 l_d_fake: 5.4434e-02 out_d_fake: -6.0155e+00 
2024-10-22 20:52:48,299 INFO: [finet..][epoch:5183, iter: 321,600, lr:(1.000e-04,)] [eta: 14:52:13, time (data): 0.673 (0.113)] l_g_pix: 3.3761e-02 l_g_percep: 6.5182e+00 l_g_gan: 5.6639e-01 l_d_real: 4.2539e-02 out_d_real: 1.1694e+01 l_d_fake: 1.2707e-02 out_d_fake: -5.6511e+00 
2024-10-22 20:53:58,136 INFO: [finet..][epoch:5185, iter: 321,700, lr:(1.000e-04,)] [eta: 14:52:16, time (data): 0.715 (0.158)] l_g_pix: 4.5501e-02 l_g_percep: 6.4156e+00 l_g_gan: 3.8441e-01 l_d_real: 4.9943e-03 out_d_real: 1.2797e+01 l_d_fake: 8.9258e-02 out_d_fake: -3.7542e+00 
2024-10-22 20:55:07,496 INFO: [finet..][epoch:5187, iter: 321,800, lr:(1.000e-04,)] [eta: 14:51:50, time (data): 0.704 (0.150)] l_g_pix: 2.5206e-02 l_g_percep: 5.0000e+00 l_g_gan: 4.8872e-01 l_d_real: 1.3891e-01 out_d_real: 8.6040e+00 l_d_fake: 3.6117e-02 out_d_fake: -4.8507e+00 
2024-10-22 20:56:11,198 INFO: [finet..][epoch:5188, iter: 321,900, lr:(1.000e-04,)] [eta: 14:47:28, time (data): 0.636 (0.081)] l_g_pix: 3.2908e-02 l_g_percep: 6.3113e+00 l_g_gan: 4.0882e-01 l_d_real: 1.0990e-02 out_d_real: 1.2934e+01 l_d_fake: 5.9004e-02 out_d_fake: -4.0290e+00 
2024-10-22 20:57:21,307 INFO: [finet..][epoch:5190, iter: 322,000, lr:(1.000e-04,)] [eta: 14:47:35, time (data): 0.670 (0.114)] l_g_pix: 3.4125e-02 l_g_percep: 5.5244e+00 l_g_gan: 6.1361e-01 l_d_real: 8.4400e-02 out_d_real: 9.7383e+00 l_d_fake: 6.9002e-03 out_d_fake: -6.1290e+00 
2024-10-22 20:58:24,067 INFO: [finet..][epoch:5191, iter: 322,100, lr:(1.000e-04,)] [eta: 14:43:02, time (data): 0.635 (0.084)] l_g_pix: 2.6509e-02 l_g_percep: 4.6827e+00 l_g_gan: 5.1390e-01 l_d_real: 7.0302e-02 out_d_real: 1.1226e+01 l_d_fake: 2.5631e-02 out_d_fake: -5.1129e+00 
2024-10-22 20:59:34,172 INFO: [finet..][epoch:5193, iter: 322,200, lr:(1.000e-04,)] [eta: 14:43:08, time (data): 0.670 (0.114)] l_g_pix: 2.5237e-02 l_g_percep: 4.8007e+00 l_g_gan: 5.3314e-01 l_d_real: 9.1303e-02 out_d_real: 6.6586e+00 l_d_fake: 1.9502e-02 out_d_fake: -5.3102e+00 
2024-10-22 21:00:44,505 INFO: [finet..][epoch:5195, iter: 322,300, lr:(1.000e-04,)] [eta: 14:43:14, time (data): 0.722 (0.161)] l_g_pix: 2.6769e-02 l_g_percep: 5.9084e+00 l_g_gan: 4.1387e-01 l_d_real: 1.4910e-01 out_d_real: 8.8940e+00 l_d_fake: 4.2083e-02 out_d_fake: -4.0963e+00 
2024-10-22 21:01:47,190 INFO: [finet..][epoch:5196, iter: 322,400, lr:(1.000e-04,)] [eta: 14:39:08, time (data): 0.672 (0.115)] l_g_pix: 2.2009e-02 l_g_percep: 4.8145e+00 l_g_gan: 3.7307e-01 l_d_real: 9.1107e-02 out_d_real: 8.4273e+00 l_d_fake: 8.6391e-02 out_d_fake: -3.6440e+00 
2024-10-22 21:02:57,662 INFO: [finet..][epoch:5198, iter: 322,500, lr:(1.000e-04,)] [eta: 14:39:18, time (data): 0.728 (0.162)] l_g_pix: 2.2221e-02 l_g_percep: 4.4209e+00 l_g_gan: 5.0243e-01 l_d_real: 7.3603e-03 out_d_real: 1.3044e+01 l_d_fake: 5.1862e-02 out_d_fake: -4.9723e+00 
2024-10-22 21:03:59,874 INFO: [finet..][epoch:5199, iter: 322,600, lr:(1.000e-04,)] [eta: 14:35:15, time (data): 0.672 (0.115)] l_g_pix: 3.6773e-02 l_g_percep: 5.9057e+00 l_g_gan: 5.6640e-01 l_d_real: 1.5590e-01 out_d_real: 8.1287e+00 l_d_fake: 1.2224e-02 out_d_fake: -5.6512e+00 
2024-10-22 21:05:10,414 INFO: [finet..][epoch:5201, iter: 322,700, lr:(1.000e-04,)] [eta: 14:35:24, time (data): 0.639 (0.091)] l_g_pix: 3.4298e-02 l_g_percep: 6.0597e+00 l_g_gan: 4.3107e-01 l_d_real: 2.6887e-02 out_d_real: 1.2579e+01 l_d_fake: 3.1978e-02 out_d_fake: -4.2784e+00 
2024-10-22 21:06:20,566 INFO: [finet..][epoch:5203, iter: 322,800, lr:(1.000e-04,)] [eta: 14:35:16, time (data): 0.672 (0.120)] l_g_pix: 3.5414e-02 l_g_percep: 6.4686e+00 l_g_gan: 4.5820e-01 l_d_real: 1.4430e-02 out_d_real: 1.3267e+01 l_d_fake: 5.1035e-02 out_d_fake: -4.5302e+00 
2024-10-22 21:07:23,250 INFO: [finet..][epoch:5204, iter: 322,900, lr:(1.000e-04,)] [eta: 14:31:47, time (data): 0.640 (0.090)] l_g_pix: 3.5267e-02 l_g_percep: 4.5483e+00 l_g_gan: 3.7198e-01 l_d_real: 4.7290e-02 out_d_real: 9.2738e+00 l_d_fake: 1.0284e-01 out_d_fake: -3.6168e+00 
2024-10-22 21:08:34,044 INFO: [finet..][epoch:5206, iter: 323,000, lr:(1.000e-04,)] [eta: 14:31:55, time (data): 0.677 (0.119)] l_g_pix: 3.7732e-02 l_g_percep: 6.3725e+00 l_g_gan: 5.4260e-01 l_d_real: 3.3070e-02 out_d_real: 1.2576e+01 l_d_fake: 3.1741e-02 out_d_fake: -5.3938e+00 
2024-10-22 21:09:36,602 INFO: [finet..][epoch:5207, iter: 323,100, lr:(1.000e-04,)] [eta: 14:28:33, time (data): 0.640 (0.100)] l_g_pix: 2.5112e-02 l_g_percep: 5.3300e+00 l_g_gan: 4.0406e-01 l_d_real: 6.4817e-02 out_d_real: 1.2307e+01 l_d_fake: 1.1304e-01 out_d_fake: -3.9274e+00 
2024-10-22 21:10:46,958 INFO: [finet..][epoch:5209, iter: 323,200, lr:(1.000e-04,)] [eta: 14:28:27, time (data): 0.674 (0.119)] l_g_pix: 3.3658e-02 l_g_percep: 5.7790e+00 l_g_gan: 9.4243e-01 l_d_real: 2.4054e-01 out_d_real: 7.5633e+00 l_d_fake: 2.0073e-02 out_d_fake: -9.4029e+00 
2024-10-22 21:11:57,175 INFO: [finet..][epoch:5211, iter: 323,300, lr:(1.000e-04,)] [eta: 14:28:15, time (data): 0.731 (0.169)] l_g_pix: 2.5767e-02 l_g_percep: 4.8876e+00 l_g_gan: 3.8186e-01 l_d_real: 5.7952e-03 out_d_real: 1.2375e+01 l_d_fake: 8.0313e-02 out_d_fake: -3.7383e+00 
2024-10-22 21:13:00,090 INFO: [finet..][epoch:5212, iter: 323,400, lr:(1.000e-04,)] [eta: 14:25:14, time (data): 0.676 (0.120)] l_g_pix: 4.3347e-02 l_g_percep: 6.0738e+00 l_g_gan: 5.2718e-01 l_d_real: 8.8412e-03 out_d_real: 1.2122e+01 l_d_fake: 4.6768e-02 out_d_fake: -5.2248e+00 
2024-10-22 21:14:10,371 INFO: [finet..][epoch:5214, iter: 323,500, lr:(1.000e-04,)] [eta: 14:25:01, time (data): 0.645 (0.091)] l_g_pix: 3.2667e-02 l_g_percep: 5.7684e+00 l_g_gan: 6.0291e-01 l_d_real: 7.6042e-02 out_d_real: 9.9596e+00 l_d_fake: 3.1019e-02 out_d_fake: -5.9971e+00 
2024-10-22 21:15:20,304 INFO: [finet..][epoch:5216, iter: 323,600, lr:(1.000e-04,)] [eta: 14:24:37, time (data): 0.674 (0.121)] l_g_pix: 2.4761e-02 l_g_percep: 5.0909e+00 l_g_gan: 5.0625e-01 l_d_real: 5.1757e-02 out_d_real: 1.0593e+01 l_d_fake: 4.2307e-02 out_d_fake: -5.0198e+00 
2024-10-22 21:16:23,329 INFO: [finet..][epoch:5217, iter: 323,700, lr:(1.000e-04,)] [eta: 14:21:49, time (data): 0.644 (0.089)] l_g_pix: 2.0610e-02 l_g_percep: 4.6468e+00 l_g_gan: 5.9504e-01 l_d_real: 2.6546e-02 out_d_real: 9.6050e+00 l_d_fake: 1.7450e-02 out_d_fake: -5.9326e+00 
2024-10-22 21:17:33,972 INFO: [finet..][epoch:5219, iter: 323,800, lr:(1.000e-04,)] [eta: 14:21:39, time (data): 0.678 (0.118)] l_g_pix: 3.6175e-02 l_g_percep: 4.3249e+00 l_g_gan: 4.3548e-01 l_d_real: 4.2910e-02 out_d_real: 9.5111e+00 l_d_fake: 7.7332e-02 out_d_fake: -4.2768e+00 
2024-10-22 21:18:36,522 INFO: [finet..][epoch:5220, iter: 323,900, lr:(1.000e-04,)] [eta: 14:18:47, time (data): 0.641 (0.090)] l_g_pix: 2.8542e-02 l_g_percep: 4.3330e+00 l_g_gan: 3.9219e-01 l_d_real: 2.4335e-02 out_d_real: 1.0094e+01 l_d_fake: 1.3963e-01 out_d_fake: -3.7820e+00 
2024-10-22 21:19:46,817 INFO: [finet..][epoch:5222, iter: 324,000, lr:(1.000e-04,)] [eta: 14:18:29, time (data): 0.675 (0.119)] l_g_pix: 4.6643e-02 l_g_percep: 7.2156e+00 l_g_gan: 6.3069e-01 l_d_real: 5.3841e-02 out_d_real: 9.1800e+00 l_d_fake: 1.9552e-02 out_d_fake: -6.2864e+00 
2024-10-22 21:20:57,216 INFO: [finet..][epoch:5224, iter: 324,100, lr:(1.000e-04,)] [eta: 14:18:10, time (data): 0.741 (0.182)] l_g_pix: 2.7093e-02 l_g_percep: 4.8883e+00 l_g_gan: 5.3372e-01 l_d_real: 2.2746e-02 out_d_real: 1.0896e+01 l_d_fake: 1.4788e-02 out_d_fake: -5.3220e+00 
2024-10-22 21:22:00,513 INFO: [finet..][epoch:5225, iter: 324,200, lr:(1.000e-04,)] [eta: 14:15:40, time (data): 0.681 (0.120)] l_g_pix: 3.7966e-02 l_g_percep: 6.1816e+00 l_g_gan: 5.5234e-01 l_d_real: 3.0290e-02 out_d_real: 1.0225e+01 l_d_fake: 2.4571e-02 out_d_fake: -5.4987e+00 
2024-10-22 21:23:10,843 INFO: [finet..][epoch:5227, iter: 324,300, lr:(1.000e-04,)] [eta: 14:15:18, time (data): 0.651 (0.094)] l_g_pix: 2.9719e-02 l_g_percep: 5.3877e+00 l_g_gan: 5.7147e-01 l_d_real: 2.4466e-02 out_d_real: 1.0144e+01 l_d_fake: 2.8432e-02 out_d_fake: -5.6859e+00 
2024-10-22 21:24:13,461 INFO: [finet..][epoch:5228, iter: 324,400, lr:(1.000e-04,)] [eta: 14:12:41, time (data): 0.637 (0.083)] l_g_pix: 5.0182e-02 l_g_percep: 7.1838e+00 l_g_gan: 4.6847e-01 l_d_real: 3.1022e-03 out_d_real: 1.3024e+01 l_d_fake: 1.0633e-01 out_d_fake: -4.5782e+00 
2024-10-22 21:25:24,372 INFO: [finet..][epoch:5230, iter: 324,500, lr:(1.000e-04,)] [eta: 14:12:28, time (data): 0.647 (0.095)] l_g_pix: 4.2899e-02 l_g_percep: 5.9733e+00 l_g_gan: 5.6146e-01 l_d_real: 5.1303e-03 out_d_real: 1.0972e+01 l_d_fake: 1.4923e-02 out_d_fake: -5.5992e+00 
2024-10-22 21:26:34,312 INFO: [finet..][epoch:5232, iter: 324,600, lr:(1.000e-04,)] [eta: 14:11:56, time (data): 0.677 (0.122)] l_g_pix: 2.9543e-02 l_g_percep: 5.1478e+00 l_g_gan: 4.5671e-01 l_d_real: 5.3632e-02 out_d_real: 9.3796e+00 l_d_fake: 3.0666e-02 out_d_fake: -4.5360e+00 
2024-10-22 21:27:37,059 INFO: [finet..][epoch:5233, iter: 324,700, lr:(1.000e-04,)] [eta: 14:09:27, time (data): 0.648 (0.094)] l_g_pix: 3.4923e-02 l_g_percep: 6.2358e+00 l_g_gan: 4.8264e-01 l_d_real: 6.4783e-02 out_d_real: 1.0893e+01 l_d_fake: 2.4273e-02 out_d_fake: -4.8016e+00 
2024-10-22 21:28:47,115 INFO: [finet..][epoch:5235, iter: 324,800, lr:(1.000e-04,)] [eta: 14:08:57, time (data): 0.678 (0.121)] l_g_pix: 1.9103e-02 l_g_percep: 4.3800e+00 l_g_gan: 5.0150e-01 l_d_real: 1.5627e-02 out_d_real: 1.1395e+01 l_d_fake: 3.5829e-02 out_d_fake: -4.9789e+00 
2024-10-22 21:29:56,654 INFO: [finet..][epoch:5237, iter: 324,900, lr:(1.000e-04,)] [eta: 14:08:16, time (data): 0.741 (0.183)] l_g_pix: 3.2697e-02 l_g_percep: 5.2765e+00 l_g_gan: 5.4234e-01 l_d_real: 2.5594e-02 out_d_real: 1.0664e+01 l_d_fake: 4.3938e-02 out_d_fake: -5.3792e+00 
2024-10-22 21:30:59,881 INFO: [finet..][epoch:5238, iter: 325,000, lr:(1.000e-04,)] [eta: 14:06:01, time (data): 0.679 (0.121)] l_g_pix: 3.2163e-02 l_g_percep: 6.1728e+00 l_g_gan: 5.0838e-01 l_d_real: 5.9365e-02 out_d_real: 1.1090e+01 l_d_fake: 3.8275e-02 out_d_fake: -5.0447e+00 
2024-10-22 21:30:59,881 INFO: Saving models and training states.
2024-10-22 21:31:00,879 WARNING: Save training state error: [enforce fail at inline_container.cc:325] . unexpected pos 49895168 vs 49895060, remaining retry times: 2
