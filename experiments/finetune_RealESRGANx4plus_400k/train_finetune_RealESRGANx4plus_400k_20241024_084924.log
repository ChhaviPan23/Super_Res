2024-10-24 08:49:24,270 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 1.13.1+cu117
	TorchVision: 0.14.1+cu117
2024-10-24 08:49:24,271 INFO: 
  name: finetune_RealESRGANx4plus_400k
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 2
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 120
  datasets:[
    train:[
      name: custom_data
      type: RealESRGANDataset
      dataroot_gt: HR
      meta_info: HR/meta_info.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 13
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.2
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 13
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.2
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.75
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 4
      batch_size_per_gpu: 4
      dataset_enlarge_ratio: 1
      prefetch_mode: cuda
      pin_memory: True
      phase: train
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_315000.pth
    param_key_g: params
    strict_load_g: True
    pretrain_network_d: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_d_315000.pth
    param_key_d: params
    strict_load_d: True
    resume_state: experiments/finetune_RealESRGANx4plus_400k/training_states/315000.state
    experiments_root: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k
    models: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models
    training_states: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/training_states
    log: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k
    visualization: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [400000]
      gamma: 0.5
    ]
    total_iter: 400000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: True
  rank: 0
  world_size: 2
  auto_resume: True
  is_train: True
  root_path: /home/be205_18/Real-ESRGAN-master

2024-10-24 08:49:25,327 INFO: Dataset [RealESRGANDataset] - custom_data is built.
2024-10-24 08:49:25,328 INFO: Training statistics:
	Number of train images: 499
	Dataset enlarge ratio: 1
	Batch size per gpu: 4
	World size (gpu number): 2
	Require iter number per epoch: 63
	Total epochs: 6350; iters: 400000.
2024-10-24 08:49:25,652 INFO: Network [RRDBNet] is created.
2024-10-24 08:49:25,946 INFO: Network: DistributedDataParallel - RRDBNet, with parameters: 16,697,987
2024-10-24 08:49:25,946 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2024-10-24 08:49:26,904 INFO: Loading RRDBNet model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_315000.pth, with param key: [params].
2024-10-24 08:49:27,004 INFO: Use Exponential Moving Average with decay: 0.999
2024-10-24 08:49:27,239 INFO: Network [RRDBNet] is created.
2024-10-24 08:49:27,394 INFO: Loading RRDBNet model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_315000.pth, with param key: [params_ema].
2024-10-24 08:49:27,520 INFO: Network [UNetDiscriminatorSN] is created.
2024-10-24 08:49:27,570 INFO: Network: DistributedDataParallel - UNetDiscriminatorSN, with parameters: 4,376,897
2024-10-24 08:49:27,570 INFO: UNetDiscriminatorSN(
  (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2024-10-24 08:49:27,685 INFO: Loading UNetDiscriminatorSN model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_d_315000.pth, with param key: [params].
2024-10-24 08:49:27,709 INFO: Loss [L1Loss] is created.
2024-10-24 08:49:29,163 INFO: Loss [PerceptualLoss] is created.
2024-10-24 08:49:29,185 INFO: Loss [GANLoss] is created.
2024-10-24 08:49:29,214 INFO: Model [RealESRGANModel] is created.
2024-10-24 08:49:29,377 INFO: Resuming training from epoch: 5078, iter: 315000.
2024-10-24 08:49:35,350 INFO: Use cuda prefetch dataloader
2024-10-24 08:49:35,350 INFO: Start training from epoch: 5078, iter: 315000
2024-10-24 08:50:51,735 INFO: [finet..][epoch:5079, iter: 315,100, lr:(1.000e-04,)] [eta: 19:13:48, time (data): 0.764 (0.149)] l_g_pix: 2.6652e-02 l_g_percep: 5.1204e+00 l_g_gan: 6.0611e-01 l_d_real: 6.6517e-02 out_d_real: 1.0261e+01 l_d_fake: 6.0298e-02 out_d_fake: -5.9983e+00 
2024-10-24 08:52:01,844 INFO: [finet..][epoch:5081, iter: 315,200, lr:(1.000e-04,)] [eta: 17:51:55, time (data): 0.732 (0.145)] l_g_pix: 2.7587e-02 l_g_percep: 5.9338e+00 l_g_gan: 4.3482e-01 l_d_real: 1.7280e-02 out_d_real: 1.0431e+01 l_d_fake: 7.8190e-02 out_d_fake: -4.2699e+00 
2024-10-24 08:53:04,236 INFO: [finet..][epoch:5082, iter: 315,300, lr:(1.000e-04,)] [eta: 16:47:39, time (data): 0.625 (0.070)] l_g_pix: 2.1631e-02 l_g_percep: 4.9136e+00 l_g_gan: 4.4820e-01 l_d_real: 6.5759e-02 out_d_real: 9.7716e+00 l_d_fake: 6.8522e-02 out_d_fake: -4.4132e+00 
2024-10-24 08:54:14,577 INFO: [finet..][epoch:5084, iter: 315,400, lr:(1.000e-04,)] [eta: 16:42:48, time (data): 0.664 (0.104)] l_g_pix: 2.9311e-02 l_g_percep: 5.8369e+00 l_g_gan: 4.2650e-01 l_d_real: 2.1413e-01 out_d_real: 7.1852e+00 l_d_fake: 5.4823e-02 out_d_fake: -4.2096e+00 
2024-10-24 08:55:24,381 INFO: [finet..][epoch:5086, iter: 315,500, lr:(1.000e-04,)] [eta: 16:37:55, time (data): 0.700 (0.143)] l_g_pix: 3.9877e-02 l_g_percep: 6.5140e+00 l_g_gan: 5.2721e-01 l_d_real: 9.8860e-02 out_d_real: 1.0450e+01 l_d_fake: 1.9652e-02 out_d_fake: -5.2519e+00 
2024-10-24 08:56:27,522 INFO: [finet..][epoch:5087, iter: 315,600, lr:(1.000e-04,)] [eta: 16:18:38, time (data): 0.665 (0.106)] l_g_pix: 4.2308e-02 l_g_percep: 6.9269e+00 l_g_gan: 4.6895e-01 l_d_real: 2.3196e-02 out_d_real: 1.3396e+01 l_d_fake: 7.5410e-02 out_d_fake: -4.6138e+00 
2024-10-24 08:57:38,094 INFO: [finet..][epoch:5089, iter: 315,700, lr:(1.000e-04,)] [eta: 16:19:30, time (data): 0.709 (0.144)] l_g_pix: 4.1821e-02 l_g_percep: 6.8450e+00 l_g_gan: 5.8797e-01 l_d_real: 5.4154e-02 out_d_real: 1.1072e+01 l_d_fake: 1.6021e-01 out_d_fake: -5.7191e+00 
2024-10-24 08:58:40,648 INFO: [finet..][epoch:5090, iter: 315,800, lr:(1.000e-04,)] [eta: 16:05:48, time (data): 0.667 (0.108)] l_g_pix: 2.5315e-02 l_g_percep: 4.9521e+00 l_g_gan: 5.8537e-01 l_d_real: 6.5766e-02 out_d_real: 1.4060e+01 l_d_fake: 4.1971e-02 out_d_fake: -5.8114e+00 
2024-10-24 08:59:51,247 INFO: [finet..][epoch:5092, iter: 315,900, lr:(1.000e-04,)] [eta: 16:07:25, time (data): 0.716 (0.136)] l_g_pix: 3.4060e-02 l_g_percep: 6.7663e+00 l_g_gan: 4.9832e-01 l_d_real: 7.2254e-03 out_d_real: 1.4160e+01 l_d_fake: 7.0003e-02 out_d_fake: -4.9127e+00 
2024-10-24 09:01:01,317 INFO: [finet..][epoch:5094, iter: 316,000, lr:(1.000e-04,)] [eta: 16:07:44, time (data): 0.708 (0.137)] l_g_pix: 3.2072e-02 l_g_percep: 5.7305e+00 l_g_gan: 4.6522e-01 l_d_real: 6.5947e-02 out_d_real: 1.0665e+01 l_d_fake: 3.5830e-02 out_d_fake: -4.6160e+00 
2024-10-24 09:02:03,838 INFO: [finet..][epoch:5095, iter: 316,100, lr:(1.000e-04,)] [eta: 15:58:11, time (data): 0.629 (0.076)] l_g_pix: 2.8080e-02 l_g_percep: 4.8815e+00 l_g_gan: 4.4600e-01 l_d_real: 1.6213e-02 out_d_real: 9.4792e+00 l_d_fake: 5.1903e-02 out_d_fake: -4.4077e+00 
2024-10-24 09:03:14,066 INFO: [finet..][epoch:5097, iter: 316,200, lr:(1.000e-04,)] [eta: 15:59:01, time (data): 0.666 (0.109)] l_g_pix: 2.5742e-02 l_g_percep: 5.7441e+00 l_g_gan: 4.5519e-01 l_d_real: 3.2598e-03 out_d_real: 1.3818e+01 l_d_fake: 6.5645e-02 out_d_fake: -4.4857e+00 
2024-10-24 09:04:16,438 INFO: [finet..][epoch:5098, iter: 316,300, lr:(1.000e-04,)] [eta: 15:51:08, time (data): 0.627 (0.075)] l_g_pix: 4.6888e-02 l_g_percep: 4.9268e+00 l_g_gan: 5.5476e-01 l_d_real: 5.4612e-02 out_d_real: 1.0068e+01 l_d_fake: 1.6491e-02 out_d_fake: -5.5301e+00 
2024-10-24 09:05:27,008 INFO: [finet..][epoch:5100, iter: 316,400, lr:(1.000e-04,)] [eta: 15:52:22, time (data): 0.668 (0.109)] l_g_pix: 2.7271e-02 l_g_percep: 5.1403e+00 l_g_gan: 4.6554e-01 l_d_real: 2.3352e-02 out_d_real: 1.2086e+01 l_d_fake: 3.3023e-02 out_d_fake: -4.6223e+00 
2024-10-24 09:06:37,170 INFO: [finet..][epoch:5102, iter: 316,500, lr:(1.000e-04,)] [eta: 15:52:55, time (data): 0.713 (0.153)] l_g_pix: 3.7819e-02 l_g_percep: 6.8913e+00 l_g_gan: 5.1865e-01 l_d_real: 5.1616e-02 out_d_real: 1.0849e+01 l_d_fake: 5.3911e-02 out_d_fake: -5.1318e+00 
2024-10-24 09:07:39,958 INFO: [finet..][epoch:5103, iter: 316,600, lr:(1.000e-04,)] [eta: 15:46:50, time (data): 0.669 (0.110)] l_g_pix: 3.5064e-02 l_g_percep: 6.1653e+00 l_g_gan: 5.0813e-01 l_d_real: 6.6038e-03 out_d_real: 1.4029e+01 l_d_fake: 3.4563e-02 out_d_fake: -5.0463e+00 
2024-10-24 09:08:50,386 INFO: [finet..][epoch:5105, iter: 316,700, lr:(1.000e-04,)] [eta: 15:47:35, time (data): 0.722 (0.153)] l_g_pix: 3.8963e-02 l_g_percep: 5.8953e+00 l_g_gan: 4.6888e-01 l_d_real: 9.9886e-03 out_d_real: 1.1324e+01 l_d_fake: 4.8998e-02 out_d_fake: -4.6389e+00 
2024-10-24 09:09:59,940 INFO: [finet..][epoch:5107, iter: 316,800, lr:(1.000e-04,)] [eta: 15:47:27, time (data): 0.708 (0.145)] l_g_pix: 2.9226e-02 l_g_percep: 5.7193e+00 l_g_gan: 6.0214e-01 l_d_real: 4.4528e-03 out_d_real: 1.3191e+01 l_d_fake: 2.9685e-02 out_d_fake: -5.9903e+00 
2024-10-24 09:11:03,079 INFO: [finet..][epoch:5108, iter: 316,900, lr:(1.000e-04,)] [eta: 15:42:31, time (data): 0.635 (0.079)] l_g_pix: 3.1111e-02 l_g_percep: 6.3094e+00 l_g_gan: 5.2977e-01 l_d_real: 1.9927e-02 out_d_real: 1.0854e+01 l_d_fake: 3.8634e-02 out_d_fake: -5.2589e+00 
2024-10-24 09:12:12,989 INFO: [finet..][epoch:5110, iter: 317,000, lr:(1.000e-04,)] [eta: 15:42:40, time (data): 0.668 (0.110)] l_g_pix: 3.8062e-02 l_g_percep: 6.4395e+00 l_g_gan: 4.9560e-01 l_d_real: 9.4349e-03 out_d_real: 1.1318e+01 l_d_fake: 2.3819e-01 out_d_fake: -4.7177e+00 
2024-10-24 09:13:15,408 INFO: [finet..][epoch:5111, iter: 317,100, lr:(1.000e-04,)] [eta: 15:37:46, time (data): 0.631 (0.080)] l_g_pix: 5.4399e-02 l_g_percep: 5.9385e+00 l_g_gan: 4.8241e-01 l_d_real: 4.3438e-02 out_d_real: 1.2324e+01 l_d_fake: 5.5516e-02 out_d_fake: -4.7679e+00 
2024-10-24 09:14:25,544 INFO: [finet..][epoch:5113, iter: 317,200, lr:(1.000e-04,)] [eta: 15:38:04, time (data): 0.668 (0.111)] l_g_pix: 2.7883e-02 l_g_percep: 6.1553e+00 l_g_gan: 4.5924e-01 l_d_real: 8.6460e-02 out_d_real: 1.1687e+01 l_d_fake: 3.9240e-02 out_d_fake: -4.5529e+00 
2024-10-24 09:15:36,080 INFO: [finet..][epoch:5115, iter: 317,300, lr:(1.000e-04,)] [eta: 15:38:28, time (data): 0.723 (0.156)] l_g_pix: 3.1352e-02 l_g_percep: 4.8696e+00 l_g_gan: 5.4663e-01 l_d_real: 4.2501e-02 out_d_real: 9.8263e+00 l_d_fake: 1.3208e-02 out_d_fake: -5.4529e+00 
2024-10-24 09:16:38,675 INFO: [finet..][epoch:5116, iter: 317,400, lr:(1.000e-04,)] [eta: 15:34:10, time (data): 0.672 (0.112)] l_g_pix: 2.5640e-02 l_g_percep: 4.3814e+00 l_g_gan: 4.4084e-01 l_d_real: 2.7903e-02 out_d_real: 9.3300e+00 l_d_fake: 4.7065e-02 out_d_fake: -4.3602e+00 
2024-10-24 09:17:48,506 INFO: [finet..][epoch:5118, iter: 317,500, lr:(1.000e-04,)] [eta: 15:34:08, time (data): 0.719 (0.154)] l_g_pix: 2.6124e-02 l_g_percep: 5.2853e+00 l_g_gan: 5.0871e-01 l_d_real: 8.4980e-02 out_d_real: 8.6670e+00 l_d_fake: 3.7027e-02 out_d_fake: -5.0496e+00 
2024-10-24 09:18:50,736 INFO: [finet..][epoch:5119, iter: 317,600, lr:(1.000e-04,)] [eta: 15:29:59, time (data): 0.667 (0.111)] l_g_pix: 4.0030e-02 l_g_percep: 5.0452e+00 l_g_gan: 4.2599e-01 l_d_real: 2.5436e-02 out_d_real: 1.1636e+01 l_d_fake: 1.0548e-01 out_d_fake: -4.1539e+00 
2024-10-24 09:20:00,905 INFO: [finet..][epoch:5121, iter: 317,700, lr:(1.000e-04,)] [eta: 15:30:06, time (data): 0.636 (0.083)] l_g_pix: 2.7083e-02 l_g_percep: 5.4964e+00 l_g_gan: 5.9368e-01 l_d_real: 3.9598e-02 out_d_real: 1.1831e+01 l_d_fake: 2.0099e-02 out_d_fake: -5.9155e+00 
2024-10-24 09:21:10,782 INFO: [finet..][epoch:5123, iter: 317,800, lr:(1.000e-04,)] [eta: 15:29:59, time (data): 0.669 (0.110)] l_g_pix: 3.5115e-02 l_g_percep: 6.5290e+00 l_g_gan: 5.9017e-01 l_d_real: 1.9924e-01 out_d_real: 1.1427e+01 l_d_fake: 1.8589e-02 out_d_fake: -5.8827e+00 
2024-10-24 09:22:13,533 INFO: [finet..][epoch:5124, iter: 317,900, lr:(1.000e-04,)] [eta: 15:26:26, time (data): 0.639 (0.084)] l_g_pix: 2.5453e-02 l_g_percep: 5.8077e+00 l_g_gan: 4.4329e-01 l_d_real: 8.8329e-02 out_d_real: 1.2002e+01 l_d_fake: 9.3550e-02 out_d_fake: -4.3390e+00 
2024-10-24 09:23:23,403 INFO: [finet..][epoch:5126, iter: 318,000, lr:(1.000e-04,)] [eta: 15:26:17, time (data): 0.671 (0.114)] l_g_pix: 2.8019e-02 l_g_percep: 5.7832e+00 l_g_gan: 5.7284e-01 l_d_real: 1.0768e-02 out_d_real: 1.1140e+01 l_d_fake: 2.1173e-02 out_d_fake: -5.7070e+00 
2024-10-24 09:24:26,756 INFO: [finet..][epoch:5127, iter: 318,100, lr:(1.000e-04,)] [eta: 15:23:12, time (data): 0.646 (0.090)] l_g_pix: 5.3873e-02 l_g_percep: 7.2956e+00 l_g_gan: 6.3850e-01 l_d_real: 1.0849e-01 out_d_real: 1.1460e+01 l_d_fake: 9.4116e-03 out_d_fake: -6.3753e+00 
2024-10-24 09:25:37,041 INFO: [finet..][epoch:5129, iter: 318,200, lr:(1.000e-04,)] [eta: 15:23:12, time (data): 0.677 (0.115)] l_g_pix: 3.5892e-02 l_g_percep: 6.0627e+00 l_g_gan: 6.0645e-01 l_d_real: 1.9809e-02 out_d_real: 1.2590e+01 l_d_fake: 1.1725e-02 out_d_fake: -6.0518e+00 
2024-10-24 09:26:47,184 INFO: [finet..][epoch:5131, iter: 318,300, lr:(1.000e-04,)] [eta: 15:23:04, time (data): 0.731 (0.173)] l_g_pix: 3.2931e-02 l_g_percep: 6.3580e+00 l_g_gan: 4.6527e-01 l_d_real: 1.3075e-01 out_d_real: 9.0596e+00 l_d_fake: 3.9758e-02 out_d_fake: -4.6126e+00 
2024-10-24 09:27:49,943 INFO: [finet..][epoch:5132, iter: 318,400, lr:(1.000e-04,)] [eta: 15:19:56, time (data): 0.675 (0.120)] l_g_pix: 2.2430e-02 l_g_percep: 4.9933e+00 l_g_gan: 5.1550e-01 l_d_real: 3.5932e-01 out_d_real: 8.4110e+00 l_d_fake: 3.1192e-02 out_d_fake: -5.1236e+00 
2024-10-24 09:28:59,985 INFO: [finet..][epoch:5134, iter: 318,500, lr:(1.000e-04,)] [eta: 15:19:44, time (data): 0.643 (0.088)] l_g_pix: 3.0805e-02 l_g_percep: 5.5980e+00 l_g_gan: 4.6151e-01 l_d_real: 8.8281e-02 out_d_real: 9.3254e+00 l_d_fake: 9.4679e-02 out_d_fake: -4.5197e+00 
2024-10-24 09:30:10,189 INFO: [finet..][epoch:5136, iter: 318,600, lr:(1.000e-04,)] [eta: 15:19:33, time (data): 0.675 (0.116)] l_g_pix: 2.7643e-02 l_g_percep: 5.3720e+00 l_g_gan: 4.8353e-01 l_d_real: 3.7639e-02 out_d_real: 9.2104e+00 l_d_fake: 3.4063e-02 out_d_fake: -4.8008e+00 
2024-10-24 09:31:13,218 INFO: [finet..][epoch:5137, iter: 318,700, lr:(1.000e-04,)] [eta: 15:16:41, time (data): 0.643 (0.088)] l_g_pix: 2.7440e-02 l_g_percep: 5.5620e+00 l_g_gan: 6.2619e-01 l_d_real: 1.5230e-01 out_d_real: 1.0733e+01 l_d_fake: 3.0065e-02 out_d_fake: -6.2310e+00 
2024-10-24 09:32:23,428 INFO: [finet..][epoch:5139, iter: 318,800, lr:(1.000e-04,)] [eta: 15:16:28, time (data): 0.675 (0.120)] l_g_pix: 4.4502e-02 l_g_percep: 6.4799e+00 l_g_gan: 6.4956e-01 l_d_real: 2.2845e-02 out_d_real: 1.2966e+01 l_d_fake: 1.6542e-02 out_d_fake: -6.4787e+00 
2024-10-24 09:33:26,215 INFO: [finet..][epoch:5140, iter: 318,900, lr:(1.000e-04,)] [eta: 15:13:37, time (data): 0.644 (0.088)] l_g_pix: 3.3601e-02 l_g_percep: 6.8050e+00 l_g_gan: 4.9606e-01 l_d_real: 2.0197e-02 out_d_real: 1.2190e+01 l_d_fake: 3.2792e-02 out_d_fake: -4.9275e+00 
2024-10-24 09:34:36,242 INFO: [finet..][epoch:5142, iter: 319,000, lr:(1.000e-04,)] [eta: 15:13:19, time (data): 0.675 (0.113)] l_g_pix: 3.3412e-02 l_g_percep: 6.0870e+00 l_g_gan: 4.7368e-01 l_d_real: 1.1943e-02 out_d_real: 1.1913e+01 l_d_fake: 4.0026e-02 out_d_fake: -4.6965e+00 
2024-10-24 09:35:46,120 INFO: [finet..][epoch:5144, iter: 319,100, lr:(1.000e-04,)] [eta: 15:12:55, time (data): 0.735 (0.175)] l_g_pix: 2.8566e-02 l_g_percep: 4.6468e+00 l_g_gan: 4.4071e-01 l_d_real: 1.3767e-01 out_d_real: 1.0578e+01 l_d_fake: 6.3652e-02 out_d_fake: -4.3418e+00 
2024-10-24 09:36:48,789 INFO: [finet..][epoch:5145, iter: 319,200, lr:(1.000e-04,)] [eta: 15:10:11, time (data): 0.675 (0.118)] l_g_pix: 2.8287e-02 l_g_percep: 5.4332e+00 l_g_gan: 5.9925e-01 l_d_real: 1.3335e-01 out_d_real: 9.8903e+00 l_d_fake: 2.5312e-02 out_d_fake: -5.9669e+00 
2024-10-24 09:37:58,666 INFO: [finet..][epoch:5147, iter: 319,300, lr:(1.000e-04,)] [eta: 15:09:46, time (data): 0.647 (0.089)] l_g_pix: 4.2897e-02 l_g_percep: 6.3228e+00 l_g_gan: 5.3133e-01 l_d_real: 7.9504e-02 out_d_real: 1.3031e+01 l_d_fake: 2.3714e-02 out_d_fake: -5.2892e+00 
2024-10-24 09:39:00,830 INFO: [finet..][epoch:5148, iter: 319,400, lr:(1.000e-04,)] [eta: 15:06:58, time (data): 0.633 (0.080)] l_g_pix: 3.7817e-02 l_g_percep: 6.3435e+00 l_g_gan: 4.7989e-01 l_d_real: 3.4927e-02 out_d_real: 1.1751e+01 l_d_fake: 1.7157e-01 out_d_fake: -4.6269e+00 
2024-10-24 09:40:11,235 INFO: [finet..][epoch:5150, iter: 319,500, lr:(1.000e-04,)] [eta: 15:06:42, time (data): 0.648 (0.093)] l_g_pix: 3.6756e-02 l_g_percep: 6.4801e+00 l_g_gan: 6.0990e-01 l_d_real: 4.7834e-02 out_d_real: 1.0860e+01 l_d_fake: 1.9476e-02 out_d_fake: -6.0786e+00 
2024-10-24 09:41:20,802 INFO: [finet..][epoch:5152, iter: 319,600, lr:(1.000e-04,)] [eta: 15:06:09, time (data): 0.675 (0.119)] l_g_pix: 4.3158e-02 l_g_percep: 6.9103e+00 l_g_gan: 5.2231e-01 l_d_real: 3.7847e-02 out_d_real: 1.3270e+01 l_d_fake: 5.7230e-02 out_d_fake: -5.1654e+00 
2024-10-24 09:42:23,360 INFO: [finet..][epoch:5153, iter: 319,700, lr:(1.000e-04,)] [eta: 15:03:35, time (data): 0.646 (0.092)] l_g_pix: 5.0584e-02 l_g_percep: 5.6606e+00 l_g_gan: 5.8745e-01 l_d_real: 9.9423e-02 out_d_real: 1.2716e+01 l_d_fake: 2.9249e-02 out_d_fake: -5.8447e+00 
2024-10-24 09:43:32,904 INFO: [finet..][epoch:5155, iter: 319,800, lr:(1.000e-04,)] [eta: 15:03:01, time (data): 0.674 (0.118)] l_g_pix: 2.1417e-02 l_g_percep: 5.2526e+00 l_g_gan: 5.0720e-01 l_d_real: 1.7708e-01 out_d_real: 6.4565e+00 l_d_fake: 7.5052e-02 out_d_fake: -4.9947e+00 
2024-10-24 09:44:42,200 INFO: [finet..][epoch:5157, iter: 319,900, lr:(1.000e-04,)] [eta: 15:02:22, time (data): 0.737 (0.187)] l_g_pix: 3.2738e-02 l_g_percep: 5.3751e+00 l_g_gan: 5.9569e-01 l_d_real: 1.9808e-02 out_d_real: 1.4872e+01 l_d_fake: 2.4242e-02 out_d_fake: -5.9322e+00 
2024-10-24 09:45:45,292 INFO: [finet..][epoch:5158, iter: 320,000, lr:(1.000e-04,)] [eta: 15:00:03, time (data): 0.677 (0.122)] l_g_pix: 2.2943e-02 l_g_percep: 5.6336e+00 l_g_gan: 4.6839e-01 l_d_real: 1.4563e-03 out_d_real: 1.6232e+01 l_d_fake: 4.3404e-02 out_d_fake: -4.6403e+00 
2024-10-24 09:45:45,315 INFO: Saving models and training states.
2024-10-24 09:46:55,871 INFO: [finet..][epoch:5160, iter: 320,100, lr:(1.000e-04,)] [eta: 14:59:43, time (data): 0.655 (0.095)] l_g_pix: 3.5870e-02 l_g_percep: 6.3979e+00 l_g_gan: 4.6230e-01 l_d_real: 2.6037e-03 out_d_real: 1.2613e+01 l_d_fake: 5.6332e-02 out_d_fake: -4.5663e+00 
2024-10-24 09:47:58,502 INFO: [finet..][epoch:5161, iter: 320,200, lr:(1.000e-04,)] [eta: 14:57:20, time (data): 0.639 (0.083)] l_g_pix: 3.1074e-02 l_g_percep: 5.4560e+00 l_g_gan: 4.6510e-01 l_d_real: 1.1912e-02 out_d_real: 1.0936e+01 l_d_fake: 2.5174e-02 out_d_fake: -4.6254e+00 
2024-10-24 09:49:08,609 INFO: [finet..][epoch:5163, iter: 320,300, lr:(1.000e-04,)] [eta: 14:56:52, time (data): 0.651 (0.094)] l_g_pix: 2.3907e-02 l_g_percep: 5.6153e+00 l_g_gan: 6.6708e-01 l_d_real: 1.6496e-01 out_d_real: 9.8814e+00 l_d_fake: 1.6517e-02 out_d_fake: -6.6536e+00 
2024-10-24 09:50:18,740 INFO: [finet..][epoch:5165, iter: 320,400, lr:(1.000e-04,)] [eta: 14:56:23, time (data): 0.680 (0.121)] l_g_pix: 2.7731e-02 l_g_percep: 5.8818e+00 l_g_gan: 5.2561e-01 l_d_real: 2.1059e-02 out_d_real: 1.1543e+01 l_d_fake: 6.0203e-02 out_d_fake: -5.1957e+00 
2024-10-24 09:51:21,717 INFO: [finet..][epoch:5166, iter: 320,500, lr:(1.000e-04,)] [eta: 14:54:09, time (data): 0.657 (0.098)] l_g_pix: 3.0747e-02 l_g_percep: 6.0566e+00 l_g_gan: 6.0162e-01 l_d_real: 2.1133e-01 out_d_real: 1.0629e+01 l_d_fake: 1.5008e-02 out_d_fake: -6.0007e+00 
2024-10-24 09:52:31,615 INFO: [finet..][epoch:5168, iter: 320,600, lr:(1.000e-04,)] [eta: 14:53:36, time (data): 0.681 (0.123)] l_g_pix: 3.7528e-02 l_g_percep: 6.3927e+00 l_g_gan: 5.5411e-01 l_d_real: 1.7695e-02 out_d_real: 1.2937e+01 l_d_fake: 3.4078e-02 out_d_fake: -5.5066e+00 
2024-10-24 09:53:34,708 INFO: [finet..][epoch:5169, iter: 320,700, lr:(1.000e-04,)] [eta: 14:51:27, time (data): 0.658 (0.108)] l_g_pix: 3.0060e-02 l_g_percep: 5.6283e+00 l_g_gan: 4.3666e-01 l_d_real: 7.2346e-02 out_d_real: 8.8570e+00 l_d_fake: 4.2205e-02 out_d_fake: -4.3240e+00 
2024-10-24 09:54:46,063 INFO: [finet..][epoch:5171, iter: 320,800, lr:(1.000e-04,)] [eta: 14:51:13, time (data): 0.690 (0.134)] l_g_pix: 4.8002e-02 l_g_percep: 5.8383e+00 l_g_gan: 4.5475e-01 l_d_real: 5.1097e-02 out_d_real: 1.0715e+01 l_d_fake: 4.5921e-02 out_d_fake: -4.5010e+00 
2024-10-24 09:55:55,866 INFO: [finet..][epoch:5173, iter: 320,900, lr:(1.000e-04,)] [eta: 14:50:36, time (data): 0.666 (0.096)] l_g_pix: 2.1472e-02 l_g_percep: 4.8625e+00 l_g_gan: 4.7381e-01 l_d_real: 4.3634e-02 out_d_real: 1.2059e+01 l_d_fake: 3.6815e-02 out_d_fake: -4.7007e+00 
2024-10-24 09:56:58,166 INFO: [finet..][epoch:5174, iter: 321,000, lr:(1.000e-04,)] [eta: 14:48:19, time (data): 0.641 (0.081)] l_g_pix: 4.3959e-02 l_g_percep: 6.7201e+00 l_g_gan: 4.6736e-01 l_d_real: 1.7731e-02 out_d_real: 1.1593e+01 l_d_fake: 5.6998e-02 out_d_fake: -4.6161e+00 
2024-10-24 09:58:07,558 INFO: [finet..][epoch:5176, iter: 321,100, lr:(1.000e-04,)] [eta: 14:47:36, time (data): 0.653 (0.102)] l_g_pix: 3.2158e-02 l_g_percep: 5.4876e+00 l_g_gan: 6.1181e-01 l_d_real: 5.3816e-02 out_d_real: 1.0173e+01 l_d_fake: 1.3928e-02 out_d_fake: -6.1037e+00 
2024-10-24 09:59:10,209 INFO: [finet..][epoch:5177, iter: 321,200, lr:(1.000e-04,)] [eta: 14:45:27, time (data): 0.637 (0.089)] l_g_pix: 3.3302e-02 l_g_percep: 6.1108e+00 l_g_gan: 5.6957e-01 l_d_real: 2.6689e-03 out_d_real: 1.5746e+01 l_d_fake: 9.2862e-03 out_d_fake: -5.6862e+00 
2024-10-24 10:00:20,039 INFO: [finet..][epoch:5179, iter: 321,300, lr:(1.000e-04,)] [eta: 14:44:50, time (data): 0.659 (0.107)] l_g_pix: 2.7280e-02 l_g_percep: 4.5664e+00 l_g_gan: 3.6276e-01 l_d_real: 7.2016e-02 out_d_real: 9.0420e+00 l_d_fake: 1.2984e-01 out_d_fake: -3.4976e+00 
2024-10-24 10:01:29,820 INFO: [finet..][epoch:5181, iter: 321,400, lr:(1.000e-04,)] [eta: 14:44:11, time (data): 0.682 (0.126)] l_g_pix: 2.6541e-02 l_g_percep: 5.1316e+00 l_g_gan: 5.0946e-01 l_d_real: 9.2194e-02 out_d_real: 9.6431e+00 l_d_fake: 1.3622e-01 out_d_fake: -4.9579e+00 
2024-10-24 10:02:32,652 INFO: [finet..][epoch:5182, iter: 321,500, lr:(1.000e-04,)] [eta: 14:42:07, time (data): 0.663 (0.105)] l_g_pix: 3.3036e-02 l_g_percep: 5.6572e+00 l_g_gan: 5.9643e-01 l_d_real: 9.4648e-02 out_d_real: 8.6325e+00 l_d_fake: 3.5950e-02 out_d_fake: -5.9273e+00 
2024-10-24 10:03:42,037 INFO: [finet..][epoch:5184, iter: 321,600, lr:(1.000e-04,)] [eta: 14:41:23, time (data): 0.681 (0.125)] l_g_pix: 4.7979e-02 l_g_percep: 6.4046e+00 l_g_gan: 6.0244e-01 l_d_real: 1.4845e-01 out_d_real: 1.0349e+01 l_d_fake: 1.7050e-02 out_d_fake: -6.0068e+00 
2024-10-24 10:04:52,064 INFO: [finet..][epoch:5186, iter: 321,700, lr:(1.000e-04,)] [eta: 14:40:46, time (data): 0.783 (0.212)] l_g_pix: 3.1837e-02 l_g_percep: 5.3740e+00 l_g_gan: 6.2331e-01 l_d_real: 3.2401e-02 out_d_real: 1.3540e+01 l_d_fake: 1.3428e-02 out_d_fake: -6.2191e+00 
2024-10-24 10:05:55,101 INFO: [finet..][epoch:5187, iter: 321,800, lr:(1.000e-04,)] [eta: 14:38:47, time (data): 0.691 (0.128)] l_g_pix: 3.1943e-02 l_g_percep: 5.9934e+00 l_g_gan: 4.6771e-01 l_d_real: 4.8700e-02 out_d_real: 8.1398e+00 l_d_fake: 6.1885e-02 out_d_fake: -4.6148e+00 
2024-10-24 10:07:05,399 INFO: [finet..][epoch:5189, iter: 321,900, lr:(1.000e-04,)] [eta: 14:38:12, time (data): 0.669 (0.109)] l_g_pix: 2.6343e-02 l_g_percep: 5.4886e+00 l_g_gan: 5.1430e-01 l_d_real: 1.4811e-01 out_d_real: 1.2169e+01 l_d_fake: 3.1813e-02 out_d_fake: -5.1097e+00 
2024-10-24 10:08:07,941 INFO: [finet..][epoch:5190, iter: 322,000, lr:(1.000e-04,)] [eta: 14:36:10, time (data): 0.643 (0.087)] l_g_pix: 2.4496e-02 l_g_percep: 5.3247e+00 l_g_gan: 3.4685e-01 l_d_real: 2.5760e-02 out_d_real: 1.0099e+01 l_d_fake: 1.4312e-01 out_d_fake: -3.3253e+00 
2024-10-24 10:09:17,984 INFO: [finet..][epoch:5192, iter: 322,100, lr:(1.000e-04,)] [eta: 14:35:31, time (data): 0.664 (0.110)] l_g_pix: 3.6190e-02 l_g_percep: 6.2753e+00 l_g_gan: 5.4468e-01 l_d_real: 3.4827e-01 out_d_real: 1.0582e+01 l_d_fake: 5.1239e-02 out_d_fake: -5.3954e+00 
2024-10-24 10:10:27,745 INFO: [finet..][epoch:5194, iter: 322,200, lr:(1.000e-04,)] [eta: 14:34:49, time (data): 0.684 (0.128)] l_g_pix: 2.5639e-02 l_g_percep: 4.8683e+00 l_g_gan: 4.5882e-01 l_d_real: 2.8760e-02 out_d_real: 1.2310e+01 l_d_fake: 1.1471e-01 out_d_fake: -4.4732e+00 
2024-10-24 10:11:30,214 INFO: [finet..][epoch:5195, iter: 322,300, lr:(1.000e-04,)] [eta: 14:32:48, time (data): 0.665 (0.114)] l_g_pix: 3.6245e-02 l_g_percep: 5.8479e+00 l_g_gan: 5.5028e-01 l_d_real: 2.1139e-02 out_d_real: 1.1777e+01 l_d_fake: 2.1236e-02 out_d_fake: -5.4812e+00 
2024-10-24 10:12:40,116 INFO: [finet..][epoch:5197, iter: 322,400, lr:(1.000e-04,)] [eta: 14:32:07, time (data): 0.686 (0.135)] l_g_pix: 3.7907e-02 l_g_percep: 6.3019e+00 l_g_gan: 3.9606e-01 l_d_real: 9.0419e-02 out_d_real: 9.4600e+00 l_d_fake: 7.1848e-02 out_d_fake: -3.8885e+00 
2024-10-24 10:13:42,293 INFO: [finet..][epoch:5198, iter: 322,500, lr:(1.000e-04,)] [eta: 14:30:05, time (data): 0.669 (0.112)] l_g_pix: 3.3447e-02 l_g_percep: 6.1227e+00 l_g_gan: 5.1976e-01 l_d_real: 9.3185e-02 out_d_real: 7.8357e+00 l_d_fake: 3.0811e-02 out_d_fake: -5.1666e+00 
2024-10-24 10:14:53,261 INFO: [finet..][epoch:5200, iter: 322,600, lr:(1.000e-04,)] [eta: 14:29:35, time (data): 0.694 (0.134)] l_g_pix: 3.0078e-02 l_g_percep: 5.9684e+00 l_g_gan: 4.8090e-01 l_d_real: 3.8699e-02 out_d_real: 8.7970e+00 l_d_fake: 3.6405e-02 out_d_fake: -4.7720e+00 
2024-10-24 10:16:03,240 INFO: [finet..][epoch:5202, iter: 322,700, lr:(1.000e-04,)] [eta: 14:28:53, time (data): 0.676 (0.118)] l_g_pix: 2.3356e-02 l_g_percep: 5.1872e+00 l_g_gan: 4.7259e-01 l_d_real: 1.1837e-01 out_d_real: 9.3469e+00 l_d_fake: 4.5199e-02 out_d_fake: -4.6801e+00 
