2024-10-21 19:18:07,856 INFO: 
                ____                _       _____  ____
               / __ ) ____ _ _____ (_)_____/ ___/ / __ \
              / __  |/ __ `// ___// // ___/\__ \ / /_/ /
             / /_/ // /_/ /(__  )/ // /__ ___/ // _, _/
            /_____/ \__,_//____//_/ \___//____//_/ |_|
     ______                   __   __                 __      __
    / ____/____   ____   ____/ /  / /   __  __ _____ / /__   / /
   / / __ / __ \ / __ \ / __  /  / /   / / / // ___// //_/  / /
  / /_/ // /_/ // /_/ // /_/ /  / /___/ /_/ // /__ / /<    /_/
  \____/ \____/ \____/ \____/  /_____/\____/ \___//_/|_|  (_)
    
Version Information: 
	BasicSR: 1.4.2
	PyTorch: 1.13.1+cu117
	TorchVision: 0.14.1+cu117
2024-10-21 19:18:07,857 INFO: 
  name: finetune_RealESRGANx4plus_400k
  model_type: RealESRGANModel
  scale: 4
  num_gpu: 2
  manual_seed: 0
  l1_gt_usm: True
  percep_gt_usm: True
  gan_gt_usm: False
  resize_prob: [0.2, 0.7, 0.1]
  resize_range: [0.15, 1.5]
  gaussian_noise_prob: 0.5
  noise_range: [1, 30]
  poisson_scale_range: [0.05, 3]
  gray_noise_prob: 0.4
  jpeg_range: [30, 95]
  second_blur_prob: 0.8
  resize_prob2: [0.3, 0.4, 0.3]
  resize_range2: [0.3, 1.2]
  gaussian_noise_prob2: 0.5
  noise_range2: [1, 25]
  poisson_scale_range2: [0.05, 2.5]
  gray_noise_prob2: 0.4
  jpeg_range2: [30, 95]
  gt_size: 256
  queue_size: 120
  datasets:[
    train:[
      name: custom_data
      type: RealESRGANDataset
      dataroot_gt: HR
      meta_info: HR/meta_info.txt
      io_backend:[
        type: disk
      ]
      blur_kernel_size: 13
      kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob: 0.2
      blur_sigma: [0.2, 3]
      betag_range: [0.5, 4]
      betap_range: [1, 2]
      blur_kernel_size2: 13
      kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
      kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
      sinc_prob2: 0.2
      blur_sigma2: [0.2, 1.5]
      betag_range2: [0.5, 4]
      betap_range2: [1, 2]
      final_sinc_prob: 0.75
      gt_size: 256
      use_hflip: True
      use_rot: False
      use_shuffle: True
      num_worker_per_gpu: 4
      batch_size_per_gpu: 4
      dataset_enlarge_ratio: 1
      prefetch_mode: cuda
      pin_memory: True
      phase: train
      scale: 4
    ]
  ]
  network_g:[
    type: RRDBNet
    num_in_ch: 3
    num_out_ch: 3
    num_feat: 64
    num_block: 23
    num_grow_ch: 32
  ]
  network_d:[
    type: UNetDiscriminatorSN
    num_in_ch: 3
    num_feat: 64
    skip_connection: True
  ]
  path:[
    pretrain_network_g: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_275000.pth
    param_key_g: params
    strict_load_g: True
    pretrain_network_d: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_d_275000.pth
    param_key_d: params
    strict_load_d: True
    resume_state: experiments/finetune_RealESRGANx4plus_400k/training_states/275000.state
    experiments_root: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k
    models: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models
    training_states: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/training_states
    log: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k
    visualization: /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/visualization
  ]
  train:[
    ema_decay: 0.999
    optim_g:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    optim_d:[
      type: Adam
      lr: 0.0001
      weight_decay: 0
      betas: [0.9, 0.99]
    ]
    scheduler:[
      type: MultiStepLR
      milestones: [400000]
      gamma: 0.5
    ]
    total_iter: 400000
    warmup_iter: -1
    pixel_opt:[
      type: L1Loss
      loss_weight: 1.0
      reduction: mean
    ]
    perceptual_opt:[
      type: PerceptualLoss
      layer_weights:[
        conv1_2: 0.1
        conv2_2: 0.1
        conv3_4: 1
        conv4_4: 1
        conv5_4: 1
      ]
      vgg_type: vgg19
      use_input_norm: True
      perceptual_weight: 1.0
      style_weight: 0
      range_norm: False
      criterion: l1
    ]
    gan_opt:[
      type: GANLoss
      gan_type: vanilla
      real_label_val: 1.0
      fake_label_val: 0.0
      loss_weight: 0.1
    ]
    net_d_iters: 1
    net_d_init_iters: 0
  ]
  logger:[
    print_freq: 100
    save_checkpoint_freq: 5000.0
    use_tb_logger: True
    wandb:[
      project: None
      resume_id: None
    ]
  ]
  dist_params:[
    backend: nccl
    port: 29500
  ]
  dist: True
  rank: 0
  world_size: 2
  auto_resume: True
  is_train: True
  root_path: /home/be205_18/Real-ESRGAN-master

2024-10-21 19:18:09,395 INFO: Dataset [RealESRGANDataset] - custom_data is built.
2024-10-21 19:18:09,396 INFO: Training statistics:
	Number of train images: 499
	Dataset enlarge ratio: 1
	Batch size per gpu: 4
	World size (gpu number): 2
	Require iter number per epoch: 63
	Total epochs: 6350; iters: 400000.
2024-10-21 19:18:09,713 INFO: Network [RRDBNet] is created.
2024-10-21 19:18:10,266 INFO: Network: DistributedDataParallel - RRDBNet, with parameters: 16,697,987
2024-10-21 19:18:10,266 INFO: RRDBNet(
  (conv_first): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (body): Sequential(
    (0): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (1): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (2): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (3): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (4): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (5): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (6): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (7): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (8): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (9): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (10): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (11): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (12): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (13): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (14): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (15): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (16): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (17): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (18): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (19): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (20): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (21): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
    (22): RRDB(
      (rdb1): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb2): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
      (rdb3): ResidualDenseBlock(
        (conv1): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv2): Conv2d(96, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv3): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv4): Conv2d(160, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (conv5): Conv2d(192, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
      )
    )
  )
  (conv_body): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_up2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_hr): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv_last): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (lrelu): LeakyReLU(negative_slope=0.2, inplace=True)
)
2024-10-21 19:18:11,127 INFO: Loading RRDBNet model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_275000.pth, with param key: [params].
2024-10-21 19:18:11,291 INFO: Use Exponential Moving Average with decay: 0.999
2024-10-21 19:18:11,548 INFO: Network [RRDBNet] is created.
2024-10-21 19:18:11,705 INFO: Loading RRDBNet model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_g_275000.pth, with param key: [params_ema].
2024-10-21 19:18:12,087 INFO: Network [UNetDiscriminatorSN] is created.
2024-10-21 19:18:12,097 INFO: Network: DistributedDataParallel - UNetDiscriminatorSN, with parameters: 4,376,897
2024-10-21 19:18:12,097 INFO: UNetDiscriminatorSN(
  (conv0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  (conv1): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv2): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv3): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
  (conv4): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv5): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv6): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv7): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv8): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv9): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
2024-10-21 19:18:12,238 INFO: Loading UNetDiscriminatorSN model from /home/be205_18/Real-ESRGAN-master/experiments/finetune_RealESRGANx4plus_400k/models/net_d_275000.pth, with param key: [params].
2024-10-21 19:18:12,263 INFO: Loss [L1Loss] is created.
2024-10-21 19:18:13,745 INFO: Loss [PerceptualLoss] is created.
2024-10-21 19:18:13,767 INFO: Loss [GANLoss] is created.
2024-10-21 19:18:13,847 INFO: Model [RealESRGANModel] is created.
2024-10-21 19:18:14,055 INFO: Resuming training from epoch: 4433, iter: 275000.
2024-10-21 19:18:20,058 INFO: Use cuda prefetch dataloader
2024-10-21 19:18:20,058 INFO: Start training from epoch: 4433, iter: 275000
2024-10-21 19:19:38,728 INFO: [finet..][epoch:4434, iter: 275,100, lr:(1.000e-04,)] [eta: 1 day, 5:05:07, time (data): 0.787 (0.152)] l_g_pix: 1.9905e-02 l_g_percep: 4.7414e+00 l_g_gan: 4.7357e-01 l_d_real: 2.3287e-02 out_d_real: 1.0811e+01 l_d_fake: 5.5079e-02 out_d_fake: -4.6783e+00 
2024-10-21 19:20:48,819 INFO: [finet..][epoch:4436, iter: 275,200, lr:(1.000e-04,)] [eta: 1 day, 2:41:31, time (data): 0.744 (0.146)] l_g_pix: 3.9998e-02 l_g_percep: 6.4540e+00 l_g_gan: 3.9134e-01 l_d_real: 1.2748e-02 out_d_real: 1.1564e+01 l_d_fake: 1.2760e-01 out_d_fake: -3.7856e+00 
2024-10-21 19:21:51,799 INFO: [finet..][epoch:4437, iter: 275,300, lr:(1.000e-04,)] [eta: 1 day, 1:03:27, time (data): 0.630 (0.078)] l_g_pix: 3.7504e-02 l_g_percep: 7.0024e+00 l_g_gan: 4.8180e-01 l_d_real: 1.3131e-02 out_d_real: 9.7883e+00 l_d_fake: 2.7837e-02 out_d_fake: -4.7901e+00 
2024-10-21 19:23:02,107 INFO: [finet..][epoch:4439, iter: 275,400, lr:(1.000e-04,)] [eta: 1 day, 0:51:43, time (data): 0.667 (0.108)] l_g_pix: 2.6766e-02 l_g_percep: 5.6130e+00 l_g_gan: 4.7404e-01 l_d_real: 1.1620e-01 out_d_real: 8.3967e+00 l_d_fake: 2.9939e-02 out_d_fake: -4.7102e+00 
2024-10-21 19:24:12,232 INFO: [finet..][epoch:4441, iter: 275,500, lr:(1.000e-04,)] [eta: 1 day, 0:43:27, time (data): 0.705 (0.141)] l_g_pix: 3.0022e-02 l_g_percep: 6.5341e+00 l_g_gan: 3.4530e-01 l_d_real: 1.6764e-01 out_d_real: 7.9919e+00 l_d_fake: 1.6782e-01 out_d_fake: -3.2849e+00 
2024-10-21 19:25:15,815 INFO: [finet..][epoch:4442, iter: 275,600, lr:(1.000e-04,)] [eta: 1 day, 0:14:58, time (data): 0.670 (0.107)] l_g_pix: 2.8253e-02 l_g_percep: 6.0849e+00 l_g_gan: 5.5672e-01 l_d_real: 2.0743e-01 out_d_real: 7.6902e+00 l_d_fake: 2.2970e-02 out_d_fake: -5.5440e+00 
2024-10-21 19:26:26,078 INFO: [finet..][epoch:4444, iter: 275,700, lr:(1.000e-04,)] [eta: 1 day, 0:13:59, time (data): 0.708 (0.151)] l_g_pix: 3.0340e-02 l_g_percep: 6.5446e+00 l_g_gan: 5.0558e-01 l_d_real: 7.5491e-02 out_d_real: 8.8586e+00 l_d_fake: 4.6557e-02 out_d_fake: -5.0091e+00 
2024-10-21 19:27:28,867 INFO: [finet..][epoch:4445, iter: 275,800, lr:(1.000e-04,)] [eta: 23:53:46, time (data): 0.667 (0.112)] l_g_pix: 2.7991e-02 l_g_percep: 5.5240e+00 l_g_gan: 4.7395e-01 l_d_real: 1.1692e-01 out_d_real: 8.7920e+00 l_d_fake: 3.5589e-02 out_d_fake: -4.7036e+00 
2024-10-21 19:28:39,459 INFO: [finet..][epoch:4447, iter: 275,900, lr:(1.000e-04,)] [eta: 23:55:39, time (data): 0.715 (0.150)] l_g_pix: 3.0559e-02 l_g_percep: 5.7545e+00 l_g_gan: 4.1126e-01 l_d_real: 3.6847e-02 out_d_real: 1.0623e+01 l_d_fake: 9.1622e-02 out_d_fake: -4.0209e+00 
2024-10-21 19:29:49,823 INFO: [finet..][epoch:4449, iter: 276,000, lr:(1.000e-04,)] [eta: 23:56:28, time (data): 0.709 (0.146)] l_g_pix: 2.9791e-02 l_g_percep: 5.9625e+00 l_g_gan: 6.6851e-01 l_d_real: 1.7356e-01 out_d_real: 1.2720e+01 l_d_fake: 7.3258e-02 out_d_fake: -6.6116e+00 
2024-10-21 19:30:53,132 INFO: [finet..][epoch:4450, iter: 276,100, lr:(1.000e-04,)] [eta: 23:43:41, time (data): 0.637 (0.079)] l_g_pix: 2.7815e-02 l_g_percep: 5.2791e+00 l_g_gan: 5.5670e-01 l_d_real: 8.3554e-02 out_d_real: 1.0915e+01 l_d_fake: 2.2575e-02 out_d_fake: -5.5434e+00 
2024-10-21 19:32:03,392 INFO: [finet..][epoch:4452, iter: 276,200, lr:(1.000e-04,)] [eta: 23:44:47, time (data): 0.670 (0.110)] l_g_pix: 2.2798e-02 l_g_percep: 4.9769e+00 l_g_gan: 3.8471e-01 l_d_real: 8.6475e-02 out_d_real: 1.2108e+01 l_d_fake: 7.5201e-02 out_d_fake: -3.7719e+00 
2024-10-21 19:33:05,401 INFO: [finet..][epoch:4453, iter: 276,300, lr:(1.000e-04,)] [eta: 23:32:29, time (data): 0.625 (0.079)] l_g_pix: 2.4587e-02 l_g_percep: 5.5155e+00 l_g_gan: 5.2479e-01 l_d_real: 1.5711e-01 out_d_real: 8.0438e+00 l_d_fake: 1.9760e-02 out_d_fake: -5.2280e+00 
2024-10-21 19:34:16,513 INFO: [finet..][epoch:4455, iter: 276,400, lr:(1.000e-04,)] [eta: 23:35:09, time (data): 0.669 (0.112)] l_g_pix: 3.2071e-02 l_g_percep: 5.6859e+00 l_g_gan: 3.6843e-01 l_d_real: 1.7040e-01 out_d_real: 6.7839e+00 l_d_fake: 1.9532e-01 out_d_fake: -3.4886e+00 
2024-10-21 19:35:26,791 INFO: [finet..][epoch:4457, iter: 276,500, lr:(1.000e-04,)] [eta: 23:36:11, time (data): 0.715 (0.144)] l_g_pix: 4.7944e-02 l_g_percep: 6.9601e+00 l_g_gan: 4.9220e-01 l_d_real: 1.2133e-01 out_d_real: 7.2060e+00 l_d_fake: 4.2775e-02 out_d_fake: -4.8789e+00 
2024-10-21 19:36:29,768 INFO: [finet..][epoch:4458, iter: 276,600, lr:(1.000e-04,)] [eta: 23:27:33, time (data): 0.671 (0.108)] l_g_pix: 3.0270e-02 l_g_percep: 5.9744e+00 l_g_gan: 4.9192e-01 l_d_real: 6.4452e-02 out_d_real: 1.0828e+01 l_d_fake: 7.3423e-02 out_d_fake: -4.8452e+00 
2024-10-21 19:37:40,253 INFO: [finet..][epoch:4460, iter: 276,700, lr:(1.000e-04,)] [eta: 23:28:53, time (data): 0.723 (0.161)] l_g_pix: 2.3351e-02 l_g_percep: 4.7472e+00 l_g_gan: 5.8124e-01 l_d_real: 6.3538e-02 out_d_real: 8.1905e+00 l_d_fake: 2.6878e-02 out_d_fake: -5.7846e+00 
2024-10-21 19:38:49,672 INFO: [finet..][epoch:4462, iter: 276,800, lr:(1.000e-04,)] [eta: 23:28:41, time (data): 0.708 (0.152)] l_g_pix: 1.4141e-02 l_g_percep: 4.3758e+00 l_g_gan: 5.2749e-01 l_d_real: 3.6740e-02 out_d_real: 1.0305e+01 l_d_fake: 3.9692e-02 out_d_fake: -5.2350e+00 
2024-10-21 19:39:53,005 INFO: [finet..][epoch:4463, iter: 276,900, lr:(1.000e-04,)] [eta: 23:21:53, time (data): 0.636 (0.078)] l_g_pix: 3.8302e-02 l_g_percep: 6.9335e+00 l_g_gan: 4.3641e-01 l_d_real: 1.6097e-01 out_d_real: 7.9098e+00 l_d_fake: 1.4581e-01 out_d_fake: -4.2180e+00 
2024-10-21 19:41:03,115 INFO: [finet..][epoch:4465, iter: 277,000, lr:(1.000e-04,)] [eta: 23:22:34, time (data): 0.670 (0.110)] l_g_pix: 3.0781e-02 l_g_percep: 6.1751e+00 l_g_gan: 5.3075e-01 l_d_real: 4.8663e-02 out_d_real: 9.1797e+00 l_d_fake: 3.2051e-02 out_d_fake: -5.2751e+00 
2024-10-21 19:42:05,973 INFO: [finet..][epoch:4466, iter: 277,100, lr:(1.000e-04,)] [eta: 23:16:00, time (data): 0.637 (0.080)] l_g_pix: 2.5079e-02 l_g_percep: 5.6025e+00 l_g_gan: 3.6656e-01 l_d_real: 2.8914e-02 out_d_real: 1.3200e+01 l_d_fake: 1.5285e-01 out_d_fake: -3.5123e+00 
2024-10-21 19:43:16,195 INFO: [finet..][epoch:4468, iter: 277,200, lr:(1.000e-04,)] [eta: 23:16:47, time (data): 0.671 (0.113)] l_g_pix: 1.8204e-02 l_g_percep: 4.7065e+00 l_g_gan: 4.0868e-01 l_d_real: 5.0005e-02 out_d_real: 9.2579e+00 l_d_fake: 8.9400e-02 out_d_fake: -3.9971e+00 
2024-10-21 19:44:26,736 INFO: [finet..][epoch:4470, iter: 277,300, lr:(1.000e-04,)] [eta: 23:17:41, time (data): 0.724 (0.154)] l_g_pix: 2.3278e-02 l_g_percep: 4.8808e+00 l_g_gan: 6.1766e-01 l_d_real: 4.2272e-02 out_d_real: 1.0613e+01 l_d_fake: 1.6182e-02 out_d_fake: -6.1602e+00 
2024-10-21 19:45:29,571 INFO: [finet..][epoch:4471, iter: 277,400, lr:(1.000e-04,)] [eta: 23:11:52, time (data): 0.673 (0.112)] l_g_pix: 4.7116e-02 l_g_percep: 7.8401e+00 l_g_gan: 3.6142e-01 l_d_real: 9.7410e-02 out_d_real: 9.1046e+00 l_d_fake: 1.1881e-01 out_d_fake: -3.4951e+00 
2024-10-21 19:46:39,754 INFO: [finet..][epoch:4473, iter: 277,500, lr:(1.000e-04,)] [eta: 23:12:25, time (data): 0.725 (0.156)] l_g_pix: 3.8584e-02 l_g_percep: 6.5642e+00 l_g_gan: 3.9703e-01 l_d_real: 3.4869e-02 out_d_real: 7.8643e+00 l_d_fake: 1.3415e-01 out_d_fake: -3.8359e+00 
2024-10-21 19:47:41,892 INFO: [finet..][epoch:4474, iter: 277,600, lr:(1.000e-04,)] [eta: 23:06:31, time (data): 0.670 (0.112)] l_g_pix: 3.3071e-02 l_g_percep: 5.0486e+00 l_g_gan: 3.3263e-01 l_d_real: 6.4204e-02 out_d_real: 8.1591e+00 l_d_fake: 2.4505e-01 out_d_fake: -3.0811e+00 
2024-10-21 19:48:51,961 INFO: [finet..][epoch:4476, iter: 277,700, lr:(1.000e-04,)] [eta: 23:06:58, time (data): 0.635 (0.083)] l_g_pix: 2.8642e-02 l_g_percep: 6.0808e+00 l_g_gan: 4.5290e-01 l_d_real: 4.7507e-02 out_d_real: 9.7317e+00 l_d_fake: 5.8813e-02 out_d_fake: -4.4699e+00 
2024-10-21 19:50:02,215 INFO: [finet..][epoch:4478, iter: 277,800, lr:(1.000e-04,)] [eta: 23:07:27, time (data): 0.671 (0.114)] l_g_pix: 2.5631e-02 l_g_percep: 5.4038e+00 l_g_gan: 4.7272e-01 l_d_real: 1.9556e-01 out_d_real: 7.5838e+00 l_d_fake: 3.0578e-02 out_d_fake: -4.6963e+00 
2024-10-21 19:51:04,870 INFO: [finet..][epoch:4479, iter: 277,900, lr:(1.000e-04,)] [eta: 23:02:28, time (data): 0.641 (0.085)] l_g_pix: 2.8988e-02 l_g_percep: 5.7873e+00 l_g_gan: 3.7254e-01 l_d_real: 4.0466e-02 out_d_real: 9.4392e+00 l_d_fake: 1.6467e-01 out_d_fake: -3.5601e+00 
2024-10-21 19:52:15,045 INFO: [finet..][epoch:4481, iter: 278,000, lr:(1.000e-04,)] [eta: 23:02:51, time (data): 0.674 (0.117)] l_g_pix: 4.2953e-02 l_g_percep: 6.9799e+00 l_g_gan: 4.0733e-01 l_d_real: 7.2820e-03 out_d_real: 1.2092e+01 l_d_fake: 9.7332e-02 out_d_fake: -3.9759e+00 
2024-10-21 19:53:18,112 INFO: [finet..][epoch:4482, iter: 278,100, lr:(1.000e-04,)] [eta: 22:58:29, time (data): 0.646 (0.096)] l_g_pix: 3.0768e-02 l_g_percep: 6.3207e+00 l_g_gan: 6.3281e-01 l_d_real: 8.6579e-02 out_d_real: 8.3164e+00 l_d_fake: 6.5258e-03 out_d_fake: -6.3211e+00 
2024-10-21 19:54:28,124 INFO: [finet..][epoch:4484, iter: 278,200, lr:(1.000e-04,)] [eta: 22:58:43, time (data): 0.675 (0.117)] l_g_pix: 4.4787e-02 l_g_percep: 6.6739e+00 l_g_gan: 5.6593e-01 l_d_real: 1.4858e-01 out_d_real: 8.6724e+00 l_d_fake: 3.0056e-02 out_d_fake: -5.6287e+00 
2024-10-21 19:55:38,122 INFO: [finet..][epoch:4486, iter: 278,300, lr:(1.000e-04,)] [eta: 22:58:52, time (data): 0.728 (0.168)] l_g_pix: 3.1433e-02 l_g_percep: 5.1970e+00 l_g_gan: 6.7939e-01 l_d_real: 1.3447e-02 out_d_real: 1.2264e+01 l_d_fake: 6.7287e-03 out_d_fake: -6.7868e+00 
2024-10-21 19:56:40,916 INFO: [finet..][epoch:4487, iter: 278,400, lr:(1.000e-04,)] [eta: 22:54:39, time (data): 0.674 (0.118)] l_g_pix: 2.3426e-02 l_g_percep: 5.3054e+00 l_g_gan: 5.6398e-01 l_d_real: 3.2447e-01 out_d_real: 7.7670e+00 l_d_fake: 1.5791e-02 out_d_fake: -5.6233e+00 
2024-10-21 19:57:51,024 INFO: [finet..][epoch:4489, iter: 278,500, lr:(1.000e-04,)] [eta: 22:54:50, time (data): 0.646 (0.086)] l_g_pix: 3.5916e-02 l_g_percep: 6.7267e+00 l_g_gan: 5.7179e-01 l_d_real: 1.8106e-02 out_d_real: 1.0684e+01 l_d_fake: 2.9122e-02 out_d_fake: -5.6885e+00 
2024-10-21 19:59:01,036 INFO: [finet..][epoch:4491, iter: 278,600, lr:(1.000e-04,)] [eta: 22:54:53, time (data): 0.676 (0.116)] l_g_pix: 2.6675e-02 l_g_percep: 4.8346e+00 l_g_gan: 4.9554e-01 l_d_real: 1.8808e-02 out_d_real: 1.1841e+01 l_d_fake: 4.9328e-02 out_d_fake: -4.9058e+00 
2024-10-21 20:00:04,188 INFO: [finet..][epoch:4492, iter: 278,700, lr:(1.000e-04,)] [eta: 22:51:08, time (data): 0.646 (0.091)] l_g_pix: 2.7604e-02 l_g_percep: 4.9238e+00 l_g_gan: 4.9928e-01 l_d_real: 4.7994e-02 out_d_real: 1.2660e+01 l_d_fake: 4.3442e-02 out_d_fake: -4.9493e+00 
2024-10-21 20:01:14,346 INFO: [finet..][epoch:4494, iter: 278,800, lr:(1.000e-04,)] [eta: 22:51:15, time (data): 0.677 (0.123)] l_g_pix: 2.6353e-02 l_g_percep: 4.5104e+00 l_g_gan: 6.4887e-01 l_d_real: 9.4905e-03 out_d_real: 1.2737e+01 l_d_fake: 1.6660e-02 out_d_fake: -6.4718e+00 
2024-10-21 20:02:16,991 INFO: [finet..][epoch:4495, iter: 278,900, lr:(1.000e-04,)] [eta: 22:47:24, time (data): 0.642 (0.089)] l_g_pix: 2.6190e-02 l_g_percep: 4.9186e+00 l_g_gan: 4.4881e-01 l_d_real: 1.0601e-01 out_d_real: 9.5500e+00 l_d_fake: 5.0931e-02 out_d_fake: -4.4370e+00 
2024-10-21 20:03:27,447 INFO: [finet..][epoch:4497, iter: 279,000, lr:(1.000e-04,)] [eta: 22:47:38, time (data): 0.676 (0.119)] l_g_pix: 3.4058e-02 l_g_percep: 4.8998e+00 l_g_gan: 5.6421e-01 l_d_real: 1.1260e-01 out_d_real: 1.0748e+01 l_d_fake: 1.5303e-02 out_d_fake: -5.6266e+00 
2024-10-21 20:04:37,680 INFO: [finet..][epoch:4499, iter: 279,100, lr:(1.000e-04,)] [eta: 22:47:42, time (data): 0.738 (0.177)] l_g_pix: 3.7039e-02 l_g_percep: 6.4007e+00 l_g_gan: 3.8378e-01 l_d_real: 4.0212e-02 out_d_real: 1.4163e+01 l_d_fake: 1.1530e-01 out_d_fake: -3.7225e+00 
2024-10-21 20:05:40,489 INFO: [finet..][epoch:4500, iter: 279,200, lr:(1.000e-04,)] [eta: 22:44:08, time (data): 0.677 (0.119)] l_g_pix: 2.7407e-02 l_g_percep: 4.9183e+00 l_g_gan: 4.9683e-01 l_d_real: 6.3983e-02 out_d_real: 1.0963e+01 l_d_fake: 5.7826e-02 out_d_fake: -4.9100e+00 
2024-10-21 20:06:50,217 INFO: [finet..][epoch:4502, iter: 279,300, lr:(1.000e-04,)] [eta: 22:43:56, time (data): 0.647 (0.090)] l_g_pix: 3.5173e-02 l_g_percep: 6.2727e+00 l_g_gan: 4.7078e-01 l_d_real: 8.7184e-02 out_d_real: 1.0209e+01 l_d_fake: 7.5164e-02 out_d_fake: -4.6321e+00 
2024-10-21 20:07:52,382 INFO: [finet..][epoch:4503, iter: 279,400, lr:(1.000e-04,)] [eta: 22:40:13, time (data): 0.633 (0.081)] l_g_pix: 2.4829e-02 l_g_percep: 5.5723e+00 l_g_gan: 6.7258e-01 l_d_real: 1.9648e-02 out_d_real: 1.0528e+01 l_d_fake: 2.1361e-02 out_d_fake: -6.7035e+00 
2024-10-21 20:09:03,120 INFO: [finet..][epoch:4505, iter: 279,500, lr:(1.000e-04,)] [eta: 22:40:28, time (data): 0.651 (0.092)] l_g_pix: 3.4438e-02 l_g_percep: 6.6791e+00 l_g_gan: 4.6013e-01 l_d_real: 3.7863e-02 out_d_real: 1.1759e+01 l_d_fake: 5.5312e-02 out_d_fake: -4.5457e+00 
2024-10-21 20:10:13,073 INFO: [finet..][epoch:4507, iter: 279,600, lr:(1.000e-04,)] [eta: 22:40:18, time (data): 0.678 (0.119)] l_g_pix: 3.2498e-02 l_g_percep: 6.5518e+00 l_g_gan: 6.0078e-01 l_d_real: 1.1789e-01 out_d_real: 9.7506e+00 l_d_fake: 1.1959e-02 out_d_fake: -5.9952e+00 
2024-10-21 20:11:15,651 INFO: [finet..][epoch:4508, iter: 279,700, lr:(1.000e-04,)] [eta: 22:36:57, time (data): 0.648 (0.098)] l_g_pix: 2.2319e-02 l_g_percep: 4.5431e+00 l_g_gan: 6.6713e-01 l_d_real: 1.7003e-03 out_d_real: 1.6742e+01 l_d_fake: 1.0360e-02 out_d_fake: -6.6596e+00 
2024-10-21 20:12:25,838 INFO: [finet..][epoch:4510, iter: 279,800, lr:(1.000e-04,)] [eta: 22:36:52, time (data): 0.678 (0.122)] l_g_pix: 2.4214e-02 l_g_percep: 5.1155e+00 l_g_gan: 4.8192e-01 l_d_real: 1.0299e-01 out_d_real: 1.1867e+01 l_d_fake: 5.0739e-02 out_d_fake: -4.7683e+00 
2024-10-21 20:13:34,871 INFO: [finet..][epoch:4512, iter: 279,900, lr:(1.000e-04,)] [eta: 22:36:16, time (data): 0.735 (0.181)] l_g_pix: 3.8428e-02 l_g_percep: 6.7065e+00 l_g_gan: 5.3912e-01 l_d_real: 4.4176e-02 out_d_real: 1.0992e+01 l_d_fake: 9.0181e-02 out_d_fake: -5.3009e+00 
2024-10-21 20:14:38,600 INFO: [finet..][epoch:4513, iter: 280,000, lr:(1.000e-04,)] [eta: 22:33:32, time (data): 0.679 (0.118)] l_g_pix: 2.2549e-02 l_g_percep: 4.1890e+00 l_g_gan: 5.4574e-01 l_d_real: 1.2231e-01 out_d_real: 8.4697e+00 l_d_fake: 2.0165e-02 out_d_fake: -5.4365e+00 
2024-10-21 20:14:38,601 INFO: Saving models and training states.
2024-10-21 20:14:40,586 WARNING: Save training state error: [enforce fail at inline_container.cc:325] . unexpected pos 110001920 vs 110001812, remaining retry times: 2
